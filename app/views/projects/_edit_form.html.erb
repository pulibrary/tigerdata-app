<style>
   #data-users-table {
      border-color: gray;
      border-style: solid;
      border-width: 1px;
   }

   #data-users-table > thead {
      background-color: lightgray;
   }

   .added-user-textbox {
      border: none !important;
      background-color: white !important;
   }

   .delete-user-row {
      color: red;
   }
</style>

<%= render 'form_errors' %>
<div id="edit">
   <h2>Project Roles</h2>

   <div class="row">
      <div class="col-md-3">
         <label for="data_sponsor">Data Sponsor</label>
         <div class="required-field">Required</div>
      </div>
      <div class="col-md-9">
         <% if current_user.superuser? %>
            <input type="text" id="data_sponsor" aria-label="data sponsor" name="data_sponsor" required value="<%= @project.metadata_model.data_sponsor %>" /></input>
            <span class="autocomplete-arrow"></span>
            <i id="data_sponsor_error_icon" class="bi bi-exclamation-circle-fill autocomplete-error hidden-element"></i>
            <span id="data_sponsor_error" class="autocomplete-error"></span>
         <% else %>
            <input type="hidden" id="data_sponsor" name="data_sponsor" value="<%= @project.metadata_model.data_sponsor || current_user.uid %>">
            <span id="non-editable-data-sponsor"><%= @project.metadata_model.data_sponsor || current_user.uid %></span>
         <% end %>
      </div>
   </div> <!-- row -->

   <div class="row">
      <div class="col-md-3">
         <label for="data_manager">Data Manager</label>
         <div class="required-field">Required</div>
      </div>
      <div class="col-md-9">
         <% if !@project.persisted? || @project.metadata_model.data_sponsor == current_user.uid %>
            <input type="text" id="data_manager" aria-label="data manager" name="data_manager" required value="<%= @project.metadata_model.data_manager %>" /></input>
            <span class="autocomplete-arrow"></span>
            <i id="data_manager_error_icon" class="bi bi-exclamation-circle-fill autocomplete-error hidden-element"></i>
            <span id="data_manager_error" class="autocomplete-error"></span>
         <% else %>
            <input type="hidden" id="data_manager" aria-label="data manager"  name="data_manager" value="<%= @project.metadata_model.data_manager %>">
            <span id="non-editable-data-manager"><%= @project.metadata_model.data_manager %></span>
         <% end %>
      </div>
   </div> <!-- row -->

   <div class="row ">
      <div class="col-md-3">
         <label for="data-user-uid-to-add">Data Users</label>
      </div>
      <div class="col-md-9">
         <table id="data-users-table">
            <thead>
               <td>NetID</td>
               <td>Read Only</td>
               <td>Read Write</td>
               <td>Action</td>
            </thead>
            <tbody>
               <tr id="row-no-users">
                  <td>No Data User(s) added</td>
               </tr>
            </tbody>
         </table>
         <a id="addUsersButton" href="#" data-toggle="modal" data-target="#addUsersModal">+ Add User(s)</a>
      </div>
   </div> <!-- row -->

   <h2>Project Description</h2>
      <% if current_user.superuser? %>
         <div class="row">
            <div class="col-md-3">
               <label for="project_id">Project ID</label>
            </div>
            <div class="col-md-9">
               <input type="text" id="project_id" aria-label="project id" name="project_id" value="<%= @project.metadata_model.project_id %>" /></input>
            </div>
         </div> <!-- row -->
      <% end %>
      <div class="row">
         <div class="col-md-3">
            <label for="title">Title</label>
            <div class="required-field">Required</div>
         </div>
         <div class="col-md-9">
            <input type="text" id="title" name="title"  aria-label="project title" required oninvalid="this.setCustomValidity('')" oninput="this.setCustomValidity('')" value="<%= @project.metadata_model.title %>" />
         </div>
      </div> <!-- row -->

      <% if @project.in_mediaflux? %>
         <!--
           Make the field readonly so the user cannot change it, but leave it as an HTML INPUT so that it is
           send back to the controller (we don't want to lose this value)
         -->
         <div class="row">
           <div class="col-md-3">
             <label for="project_directory">Project Directory <%= @project.project_directory_parent_path %>/</label>
           </div>
           <div class="col-md-9">
              <input type="text" aria-label="project directory" id="project_directory" name="project_directory" readonly value="<%= @project.project_directory_short %>" />
           </div>
         </div> <!-- row -->

         <% if (current_user.superuser? || current_user.eligible_sysadmin?) %>
            <div class="row">
               <div class="col-md-3">
                  <label>MediaFlux ID</label>
               </div>
               <div class="col-md-9">
                  <input readonly value="<%= @project.mediaflux_id %>" />
                  <p class="mediaflux-tooltip">This project has already been saved to Mediaflux and the project_directory cannot be changed</p>
               </div>
            </div>  <!-- row -->
         <% end %>
      <% end %>

      <div class="row">
        <div class="col-md-3">
          <label for="project_directory">Directory Path</label>
          <div class="required-field">Required</div>
        </div>
        <div class="col-md-9">
          <span class="path-info"><%= @project.project_directory_parent_path %>/ </span>
          <input type="text" aria-label="project directory" id="project_directory" name="project_directory" required oninvalid="this.setCustomValidity('')" oninput="this.setCustomValidity('')" value="<%= @project.project_directory_short %>" pattern="[\w\p{L}\-]{1,64}" />
        </div>
      </div><!-- row -->

      <div class="row">
        <div class="col-md-3">
          <label for="departments">Departments</label>
          <div class="required-field">Required</div>
        </div>
        <div class="col-md-9">
          <select id="departments" name="departments[]"  aria-label="project department" required value class="form-select" multiple >
            <% Affiliation.all.each do |affiliation| %>
              <% if @project.departments.include?(affiliation[:code]) %>
                <option value="<%= affiliation[:code] %>" selected><%= affiliation[:name] %></option>
              <% else %>
                <option value="<%= affiliation[:code] %>"><%= affiliation[:name] %></option>
              <% end %>
            <% end %>
          </select>
        </div>
      </div><!-- row -->

      <div class="row">
         <div class="col-md-3">
            <label for="description">Description</label>
         </div>
         <div class="col-md-9">
            <textarea type="text" id="description"  aria-label="project description" name="description" class="input-text-long"
                        rows="5" cols="72" placeholder=""><%= @project.metadata_model.description %></textarea>
         </div>
      </div><!-- row -->

      <!-- Keeps track of added read-only and read-write users -->
      <input type="text" id="data_user_counter" name="data_user_counter" value="0" style="display:none;"/>

      <div class="actions">
         <button type=submit value="Submit" class="btn btn-primary" id="submit-btn">Submit</button>
         <% if params[:action] == 'edit' %>
         <%= link_to "Cancel", @project, class: "btn btn-secondary", id: "cancel-btn" %>
         <% else %>
         <%= link_to "Cancel", root_path, class: "btn btn-secondary", id: "cancel-btn" %>
         <% end %>
      </div>
</div><!-- id=edit -->

<!--
   Modal window to add data users
   See https://getbootstrap.com/docs/4.0/components/modal/
-->
<div class="modal fade" id="addUsersModal" tabindex="-1" role="dialog" aria-labelledby="addUsersModalLabel" aria-hidden="true">
   <div class="modal-dialog" role="document">
      <div class="modal-content">
         <div class="modal-header">
            <h5 class="modal-title" id="addUsersModalLabel">Select NetID(s)</h5>
         </div>
         <div class="modal-body">
            <input id="data-user-uid-to-add" class="add_new_user_textbox"></input>
            <span class="autocomplete-arrow"></span>
            <i id="data-user-uid-to-add_error_icon" class="bi bi-exclamation-circle-fill autocomplete-error hidden-element"></i>
            <span id="data-user-uid-to-add_error" class="autocomplete-error"></span>
            <!-- Notice that `btn-add-data-user-modal` is hidden but we use it to trigger code via JavaScript (see below)-->
            <input type="submit" value="Add User" id="btn-add-data-user-modal" class="btn btn-secondary hidden-element"/>
            <span id="add-data-user-message"></span>
            <ul id = "data-users-list-modal">
            </ul>
         </div>
         <div class="modal-footer">
         <button type="button" id="modal-close-cancel" class="btn btn-secondary" data-dismiss="modal">Close</button>
         <button type="button" id="modal-close-save" class="btn btn-primary">Save changes</button>
         </div>
      </div>
   </div>
</div> <!-- modal -->

<script>
   // Notice that we are keeping this JavaScript on the page rather than on application.js
   // because otherwise we don't have access to $(elementId).autocomplete()
   // This is due to the way we are loading the autocomplete plug-in outside of application.js
   $(function() {
      var autoCompleteElements = [];

      // Initial set of read-only and read-write users in the Rails database
      var roUsers = [<%= @project.metadata_model.ro_users.map {|user| '"' + user + '"'}.join(",").html_safe %>];
      var rwUsers = [<%= @project.metadata_model.rw_users.map {|user| '"' + user + '"'}.join(",").html_safe %>];

      function counterIncrement(counterId) {
         let counter = parseInt($(`#${counterId}`).val(), 10);
         counter += 1;
         $(`#${counterId}`).val(counter);
         return counter;
      }

      // Adds the HTML row for a given user
      function addUserHtml(netIdToAdd, elementId, access) {
         const netIdHtml = `<input id="${elementId}" name="${elementId}" value="${netIdToAdd}" readonly class="added-user-textbox" />`;
         var roHtml = `<input type="radio" id="${elementId}_ro" name="${elementId}_read_access" value="read-only"`;
         var rwHtml = `<input type="radio" id="${elementId}_rw" name="${elementId}_read_access" value="read-write"`;
         if (access == "read-only") {
            roHtml += " checked>"
            rwHtml += " >"
         } else {
            roHtml += " >";
            rwHtml += " checked>"
         }
         const actionHtml = `<a href="#" class="delete-user-row">Remove</a>`;
         const rowHtml = `<tr><td>${netIdHtml}</td><td>${roHtml}</td><td>${rwHtml}</td><td>${actionHtml}</td></tr>`;
         $(`#data-users-table>tbody`).append(rowHtml);
      }

      // Returns the netids of the users already in the HTML FORM
      function usersInForm() {
         var netIds = [];
         var userRows = $("#data-users-table>* .added-user-textbox"); // all children with the given class name
         for(var i = 0; i < userRows.length; i +=1 ) {
            netIds.push(userRows[i].value);
         }
         return netIds;
      }

      // Adds the initial users from to the form
      // rw_users and ro_users are initialized above.
      function addInitialUsersToForm() {
         var i, counter, userId, netIdToAdd;
         for(i = 0; i < rwUsers.length; i += 1) {
            counter = counterIncrement('data_user_counter');
            userId = `data_user_${counter}`;
            netIdToAdd = rwUsers[i];
            addUserHtml(netIdToAdd, userId, "read-write");
         }

         for(i = 0; i < roUsers.length; i += 1) {
            counter = counterIncrement('data_user_counter');
            userId = `data_user_${counter}`;
            netIdToAdd = roUsers[i];
            addUserHtml(netIdToAdd, userId, "read-only");
         }

         toggleNoUsersMessage(rwUsers.length + roUsers.length);
      }

      // Adds a users from the modal to the HTML FORM
      function addUsersToForm() {
         const userAlreadyAdded = usersInForm();
         const users = $(".data_user_added_modal");
         var totalUserCount = users.length;
         for(var i = 0; i < users.length; i += 1) {
            var netIdToAdd = users[i].firstChild.textContent;
            if (userAlreadyAdded.includes(netIdToAdd) === false) {
               var counter = counterIncrement('data_user_counter');
               var userId = `data_user_${counter}`;
               totalUserCount += 1;
               addUserHtml(netIdToAdd, userId, "read-only");
            }
         }

         // Remove the users from the modal
         // (since we have not added them to the HTML FORM)
         $("#data-users-list-modal>li").remove();

         toggleNoUsersMessage(totalUserCount);
      }

      // Show the "no users added" only when needed
      function toggleNoUsersMessage(userCount) {
         if (userCount == 0) {
            $("#row-no-users").removeClass("hidden-element");
         } else {
            $("#row-no-users").addClass("hidden-element");
         }
      }

      // Start up the modal with no selection
      $("#addUsersModal").on("shown.bs.modal", function() {
        $("#data-user-uid-to-add").val('');
        $("#data-user-uid-to-add").focus();
        $("#data-user-uid-to-add_error_icon").addClass("hidden-element");
        $("#data-user-uid-to-add_error").addClass("hidden-element");
      });

      // Wire up the button to open the modal form to edit users
      $("#addUsersButton").on("click", function() {
         $("#addUsersModal").modal("show");
         return false;
      });

      // Wire up the button to close the modal without saving
      $("#modal-close-cancel").on("click", function() {
         $("#addUsersModal").modal("hide");
      });

      // Wire up the button to close and save the modal
      $("#modal-close-save").on("click", function() {
         $("#addUsersModal").modal("hide");
         addUsersToForm();
      });

      // Accept and display the user entered within the modal
      $('#btn-add-data-user-modal').on('click', () => {
         const netIdToAdd = $('#data-user-uid-to-add').val();
         if (netIdToAdd.trim() === '') {
            return false; // nothing to do
         }

         // HTML for the user within the modal form
         // (it includes the netid of the user plus the "X" to delete it)
         const deleteHtml = `<button class="transparent-button delete-user-button" title="Delete this user"><i class="bi bi-x-circle"></i></button>`;
         const liHtml = `<li class="data_user_added_modal">${netIdToAdd}`
         const html = liHtml + deleteHtml;
         $(`#data-users-list-modal`).append(html);
         $(`#data-user-uid-to-add`).val('');
         $(`#data-user-uid-to-add`).focus();
         return false;
      });

      // Delete the `<li>` that represents the user.
      //
      // Notice that we target this click event by `document` and `class`
      // because the elements are added on the fly.
      $(document).on("click", ".delete-user-button", (el) => {
         $(el.target.parentElement.parentElement).remove();
      });

      // Delete a `<tr>` that represents a user.
      $(document).on("click", ".delete-user-row", (el) => {
         $(el.target.parentElement.parentElement).remove();
         return false;
      });

      // Validates the current value in a text element against the data supplied.
      var validateSelection = function(value, elementId, data, required, addButtonId) {
         const errorId = elementId + "_error";
         const errorIconId = errorId + "_icon";
         var validSelection = false;

         $(errorId).text("");
         $(errorId).addClass("hidden-element");
         $(errorIconId).addClass("hidden-element");

         if (value === "") {
            if(required === true) {
               $(errorId).removeClass("hidden-element");
               $(errorId).text("This field is required");
               $(errorIconId).removeClass("hidden-element");
            } else {
               validSelection = true;
            }
         } else {
            for(let i = 0; i < data.length; i++) {
               if (value === data[i].data) {
                  validSelection = true;
                  break;
               }
            }
            if (!validSelection) {
               $(errorId).removeClass("hidden-element");
               $(errorId).text("Invalid value entered");
               $(errorIconId).removeClass("hidden-element");
            }
         }

         if (addButtonId !== null) {
            if (value === "" || validSelection === false) {
               $(addButtonId).prop("disabled", true);
            } else {
               $(addButtonId).prop("disabled", false);
            }
         }

         return validSelection;
      }

      var validateAutocomplete = function(value, elementId, data, required, addButtonId) {
         if (validateSelection(value, elementId, data, required, addButtonId) === false) {
            // If this field is not valid, the form is not valid
            invalidateForm();
         } else {
            if (addButtonId != null) {
               $(addButtonId).click(); // Automatically add the value since it is valid
            }
            // Checks that all other fields are valid
            validateForm();
         }
      }

      // Setup the autocomplete for a given `elementId` with the `data` provided.
      // Autocomplete documentation: https://github.com/devbridge/jQuery-Autocomplete
      var setupAutocomplete = function(elementId, data, required, addButtonId) {
         $(elementId).autocomplete({
            minChars: 1,
            autoSelectFirst: true,
            showNoSuggestionNotice: true,
            noSuggestionNotice: "No results found",
            lookup: data,
            onSelect: function (suggestion) {
               $(elementId).val(suggestion.data);
               validateAutocomplete(suggestion.data, elementId, data, required, addButtonId);
            }
         });

         $(elementId).on("focusout", function(event) {
            const value = event.target.value.trim();
            validateAutocomplete(value, elementId, data, required, addButtonId);
         });
      }

      // Give focus to the autocomplete textbox when the arrow is clicked
      // This is needed because the arrow itself is not part of the textbox,
      // it just _looks_ like it is, but it is a separate HTML element.
      $(".autocomplete-arrow").on("click", function (event) {
         $(event.currentTarget).prev().focus();
         return false;
      })

      // Disables the Submit button on the form
      var invalidateForm = function() {
         $("#submit-btn").prop("disabled", true);
      }

      // Enable the Submit button only if all validations pass
      var validateForm = function() {
         for(let i = 0; i < autoCompleteElements.length; i += 1) {
            let element = autoCompleteElements[i];
            let valid = validateSelection($(element.elementId).val(), element.elementId, element.data, element.required, element.addButtonId);
            if (valid == false) {
               $("#submit-btn").prop("disabled", true);
               return;
            }
         }
         $("#submit-btn").prop("disabled", false);
      }

      // Register an autocomplete element for validation
      var registerAutocomplete = function(elementId, data, required, addButtonId) {
         var elementConfig = {elementId: elementId, data: data, required: required, addButtonId: addButtonId};
         autoCompleteElements.push(elementConfig);
         setupAutocomplete(elementId, data, required, addButtonId);
      }

      // Register all the autocomplete elements on the form
      registerAutocomplete("#data_sponsor", [ <%= sponsor_list_json %> ], true, null);
      registerAutocomplete("#data_manager", [ <%= manager_list_json %> ], true, null);
      registerAutocomplete("#data-user-uid-to-add", [ <%= all_users_list_json %> ], false, "#btn-add-data-user-modal");

      addInitialUsersToForm();
   });
</script>
