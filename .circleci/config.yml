version: 2.1
parameters:
  GHA_Event:
    type: string
    default: ""
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""

orbs:
  browser-tools: circleci/browser-tools@1.4
  coveralls: coveralls/coveralls@2.2
  ruby: circleci/ruby@2.5
  node: circleci/node@7.1
executors:
  basic-executor:
    docker:
      - image: cimg/ruby:3.4-browsers
        environment:
          RAILS_ENV: ci
    resource_class: small
    working_directory: ~/tigerdata-app

commands:
  install_dependencies:
    steps:
      - run: sudo apt update && sudo apt install -y postgresql-client libmsgpack-dev libpq-dev tzdata
      - run: gem install bundler -v '2.5.9'
      - run: cp Gemfile.lock Gemfile.lock.bak
      - restore_cache:
          key: &gem_key tiger_data-cimg-{{ checksum "Gemfile.lock.bak" }}-2
      - run: bundle config set path './vendor/bundle'
      - run: bundle config set --local without production
      - run: bundle install --jobs=4 --retry=3
      - save_cache:
          key: *gem_key
          paths:
            - ./vendor/bundle

  install_yarn_dependencies:
    steps:
      - node/install:
          install-yarn: true
          node-version: "22.9"
      - restore_cache:
          name: Restore Yarn Package Cache
          key: &yarn_key tiger_data-yarn-cimg-{{ checksum "yarn.lock" }}-2
      - run:
          name: Install NPM Dependencies via Yarn
          command: yarn install --immutable
      - save_cache:
          name: Save Yarn Package Cache
          key: *yarn_key
          paths:
            - ~/.cache/yarn

  install_crypto_policies:
    steps:
      - run: sudo apt update && sudo apt install -y crypto-policies

  run_mediaflux:
    steps:
      - run:
          name: Run Mediaflux in podman
          command: podman run -t --name mediaflux --rm --security-opt label=disable --security-opt unmask=ALL -p 8888:8888 --user podman --device /dev/net/tun --device /dev/fuse quay.io/podman/stable:latest bin/bash -c "echo $DOCKERHUB_PASSWORD | podman login --username $DOCKERHUB_USERNAME --password-stdin docker.io && podman run -t --rm -v /sys:/sys -p 8888:80 --device /dev/fuse --network bridge --mac-address=02:42:ac:11:00:02 docker.io/pulibraryrdss/mediaflux_dev:v0.14.0"
          background: true

  run_postgres:
    steps:
      - run:
          name: Run Postgres in podman
          command: podman run -t --name postgres --rm --publish 0.0.0.0:5432:5432 --env POSTGRES_HOST_AUTH_METHOD=trust --env POSTGRES_DB=test_db --env POSTGRES_USER=tiger_data_user docker.io/postgres:15.2-alpine
          background: true

  # Enable SHA1 for Mediaflux. Neccessary to run integration tests
  enable_sha1_for_mediaflux:
    steps:
      - run:
          name: Update the Crypto Policies of the Top Level Pod-Container
          command: sudo update-crypto-policies --set LEGACY
          background: true

  # Disable SHA1 for security purposes
  disable_sha1:
    steps:
      - run:
          name: Update the Crypto Policies of the Top Level Pod-Container
          command: sudo update-crypto-policies --set DEFAULT
          background: true

  cleanup_docker:
    steps:
      - run: podman stop postgres || true
      - run: podman stop mediaflux || true
      - run: podman system prune -a --volumes -f || true

jobs:
  bundler_lint:
    docker:
      - image: cimg/ruby:3.3
    working_directory: ~/tiger_data
    steps:
      - checkout
      - install_dependencies
      - run:
          name: Run rubocop
          command: bundle exec rubocop

  bundler_audit:
    docker:
      - image: cimg/ruby:3.3
    working_directory: ~/tiger_data
    steps:
      - checkout
      - install_dependencies
      - run:
          name: Run bundle audit
          command: bundle exec bundle-audit check --update
      - run:
          name: Run gem list
          command: gem list

  test:
    working_directory: ~/tiger_data
    machine: true
    resource_class: pulibrary/ruby-deploy
    environment:
      ARCH: linux
      COVERALLS_PARALLEL: true
      POSTGRES_USER: tiger_data_user
      POSTGRES_DB: test_db
      POSTGRES_HOST_AUTH_METHOD: trust
      RAILS_ENV: test
      SPEC_OPTS: "--format progress --format RspecJunitFormatter --out /tmp/rspec/rspec.xml"
    steps:
      - checkout
      - cleanup_docker
      - run_mediaflux
      - ruby/install:
          version: "3.3.0"
      - install_yarn_dependencies
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - install_dependencies
      - install_crypto_policies
      - run_postgres
      # wait for postgres and mediaflux
      - run: sleep 10
      - enable_sha1_for_mediaflux
      - persist_to_workspace:
          root: &root "~/tiger_data"
          paths: "*"
      - run: bundle exec rake db:migrate RAILS_ENV=test
      - run:
          name: Run Rspec
          command: bundle exec rspec $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - disable_sha1
      - store_test_results:
          path: /tmp/rspec
      - store_artifacts:
          path: /home/circleci/tiger_data/tmp/capybara
      - coveralls/upload:
          coverage_reporter_version: "v0.6.17"

  yarn_lint_format:
    docker:
      - image: cimg/node:22.20
    steps:
      - checkout
      - install_yarn_dependencies
      - run:
          name: Run eslint
          command: yarn run eslint 'app/javascript/**'
      - run:
          name: Run prettier
          command: yarn run prettier --check .

  yarn_test:
    docker:
      - image: cimg/node:22.20
    steps:
      - checkout
      - install_yarn_dependencies
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Run vitest
          command: yarn test
      - store_artifacts:
          path: coverage

  mflux_ci:
    working_directory: ~/tiger_data
    machine: true
    resource_class: pulibrary/ruby-deploy
    environment:
      POSTGRES_USER: tiger_data_user
      POSTGRES_DB: test_db
      POSTGRES_HOST_AUTH_METHOD: trust
      ARCH: linux
      RAILS_ENV: test
    steps:
      - checkout
      - ruby/install:
          version: "3.3.0"
      - node/install:
          install-yarn: true
          node-version: "22.9"
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - install_dependencies
      - install_yarn_dependencies
      - persist_to_workspace:
          root: &root "~/tiger_data"
          paths: "*"
      - run:
          name: Run vitest
          command: yarn run vitest run
      - run_postgres
      - run: sleep 10 # wait for postgres
      - run: bundle exec rake db:migrate RAILS_ENV=test
      - run:
          name: Run Rspec
          command: MFLUX_CI=true MFLUX_CI_PASSWORD=$DAILY_CI_MFLUX_PASSWORD bundle exec rspec --format progress --format RspecJunitFormatter -o /tmp/rspec/rspec.xml
      - store_test_results:
          path: /tmp/rspec
      - store_artifacts:
          path: coverage
      - store_artifacts:
          path: /home/circleci/tiger_data/tmp/capybara
      - coveralls/upload

  deploy:
    executor: basic-executor
    steps:
      - run:
          # prettier-ignore
          name: Deploy to CI
          command: "curl -X POST \"https://ansible-tower.princeton.edu/api/v2/job_templates/89/launch/\" --header \"Content-Type: application/json\" --header \"Authorization: Bearer $TOWER_TOKEN\" -d '{\"credential_passwords\":{},\"extra_vars\":{\"repo_name\":\"tigerdata-app\", \"runtime_env\":\"ci\"}}'"

workflows:
  version: 2
  build_accept_deploy:
    when:
      or:
        - equal: ["<< pipeline.parameters.GHA_Event >>", ""]
        - equal: ["<< pipeline.parameters.GHA_Meta >>", "TigerData-Config"] # WIP: This workflow can/(will be able to) be triggered by deploys to the mediaflux CI server
    jobs:
      - bundler_lint
      - bundler_audit
      - test
      - yarn_lint_format
      - yarn_test
      - deploy:
          requires: # Call the auto-deploy job after the main test job
            - test
          filters: # This job is only run on the main branch
            branches:
              only:
                - main
      - mflux_ci: # This job runs the test suite against the Mediaflux CI server after the main test job and after the deploy job
          requires:
            - test
            - deploy
          filters: # This job is only run on the main branch
            branches:
              only:
                - main
