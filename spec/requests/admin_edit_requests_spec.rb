# frozen_string_literal: true
require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/edit_requests", type: :request do
  describe "GET /edit" do
    it "redirects the client to the sign in path" do
      get admin_edit_request_url(1)

      expect(response).to be_redirect
      expect(response).to redirect_to(new_user_session_path)
    end
    context "when the client is authenticated and is a regular user" do
      let(:user) { FactoryBot.create(:user) }
      let(:request) { Request.create(request_title: "abc123", project_title: "new project") }

      it "redirects them to the request path with a notice that they cannot modify the request" do
        sign_in user
        get admin_edit_request_url(request.id)
        expect(response).to be_redirect
        expect(response).to redirect_to(request_path(request.id))
        expect(flash.notice).to eq("The request has already been submitted.  You can no longer modify the request.")
      end
    end

    context "when the client is authenticated and is a sysadmin" do
      let(:user) { FactoryBot.create(:sysadmin) }
      let(:request) { Request.create(request_title: "abc123", project_title: "new project") }

      it "renders the Edit Submitted Request page" do
        sign_in user
        get admin_edit_request_url(request.id)
        expect(response).to be_successful
        expect(response.body).to include("Edit Submitted Request")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        skip("Add a hash of attributes valid for your model")
      end

      it "redirects the client to the sign in path" do
        put admin_edit_request_url(1)

        expect(response).to be_redirect
        expect(response).to redirect_to(new_user_session_path)
      end

      context "when the client is authenticated and is a regular user" do
        let(:user) { FactoryBot.create(:user) }
        let(:request) { Request.create(request_title: "abc123", project_title: "new project") }

        it "redirects them to the request path with a notice that they cannot modify the request" do
          sign_in user
          put admin_edit_request_url(request.id), params: { request: { project_title: "changed_title" } }
          expect(response).to be_redirect
          expect(response).to redirect_to(request_path(request.id))
          expect(flash.notice).to eq("The request has already been submitted.  You can no longer modify the request.")
        end
      end

      context "when the client is authenticated and is a sysadmin" do
        let(:user) { FactoryBot.create(:sysadmin) }
        let(:request) { Request.create(request_title: "abc123", project_title: "new project", quota: "500 GB") }

        let(:valid_request_params) do
          { request_title: "new title", project_title: "changed_title",
            state: "draft", data_sponsor: user.uid, data_manager: user.uid,
            departments: [{ "code" => "dept", "name" => "department" }.to_json, { "code" => "dept2", "name" => "two" }.to_json],
            description: "descr", parent_folder: "parent", project_folder: "folder",
            project_id: "doi", quota: "200 GB", requested_by: "uid" }
        end

        before do
          sign_in user
        end

        it "updates the request and conveys the success message" do
          put admin_edit_request_url(request.id), params: { request: valid_request_params }
          expect(response).to be_redirect
          expect(response).to redirect_to(request_path(request.id))
          updated_request = Request.find(request.id)
          expect(updated_request.project_title).to eq("changed_title")
          expect(updated_request.quota).to eq("500 GB")
          expect(updated_request.approved_quota).to eq("200 GB")
          expect(flash.notice).to include("The request was successfully updated.")
        end

        context "with invalid parameters" do
          it "renders a response with 422 status (i.e. to display the 'edit' template)" do
            put admin_edit_request_url(request.id), params: { request: { project_title: "" } }
            expect(response).to have_http_status(:unprocessable_entity)
          end
        end
      end
    end
  end
end
